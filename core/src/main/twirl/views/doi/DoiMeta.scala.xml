@import se.lu.nateko.cp.doi.meta._

@(meta: se.lu.nateko.cp.doi.DoiMeta)<?xml version="1.0" encoding="UTF-8"?>
<resource xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://datacite.org/schema/kernel-4" xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
	<identifier identifierType="DOI">@(meta.toString)</identifier>
	<creators>
		@for(creator <- meta.creators){
			<creator>
				<creatorName>@(creator.name)</creatorName>
				@DoiMetaPerson(creator)
			</creator>
		}
	</creators>
	<titles>
		@for(title <- meta.titles){
			<title
				@for(lang <- title.lang){xml:lang="@lang"}
				@for(titleType <- title.titleType) {titleType="@(titleType.toString)"}
			>@(title.title)</title>
		}
	</titles>
	<publisher>@(meta.publisher)</publisher>
	<publicationYear>@(meta.publicationYear)</publicationYear>
	<subjects>
		@for(subject <- meta.subjects){
			<subject
				@for(lang <- subject.lang){xml:lang="@lang"}
				@for(scheme <- subject.subjectScheme){
					subjectScheme="@(scheme.subjectScheme)"
					@for(schemeUri <- scheme.schemeUri){schemeURI="@schemeUri"}
				}
				@for(valueUri <- subject.valueUri){valueURI="@valueUri"}
			>@(subject.subject)</subject>
		}
	</subjects>
	<contributors>
		@for(contributor <- meta.contributors){
			<contributor contributorType="@(contributor.contributorType)">
				<contributorName>@(contributor.name)</contributorName>
				@DoiMetaPerson(contributor)
			</contributor>
		}
	</contributors>
	<dates>
		@for(date <- meta.dates){
			<date dateType="@(date.dateType)">@(date.date)</date>
		}
	</dates>
	<resourceType resourceTypeGeneral="@(meta.resourceType.resourceTypeGeneral)">@(meta.resourceType.resourceType)</resourceType>
	<formats>
		@for(fmt <- meta.formats){
			<format>@fmt</format>
		}
	</formats>
	@for(version <- meta.version){
		<version>@version</version>
	}
	<rightsList>
		@for(rights <- meta.rights){
			<rights @for(uri <- rights.rightsUri){rightsURI="@uri"}>@(rights.rights)</rights>
		}
	</rightsList>
	<descriptions>
		@for(description <- meta.descriptions){
			<description
				@for(lang <- description.lang){xml:lang="@lang"}
				descriptionType="@(description.descriptionType)"
			>@(description.description)</description>
		}
	</descriptions>
</resource>

@DoiMetaPerson(person: Person) = {
	@(person.name) match {
		case pn: PersonalName => {
			<givenName>@(pn.givenName)</givenName>
			<familyName>@(pn.familyName)</familyName>
		}
		case _ => {}
	}
	@for(nameId <- person.nameIds){
		<nameIdentifier nameIdentifierScheme="@(nameId.scheme.name)"
			@for(schemeUri <- nameId.scheme.uri) {schemeURI="@schemeUri"}>@(nameId.id)</nameIdentifier>
	}
	@for(aff <- person.affiliations){
		<affiliation>@aff</affiliation>
	}
}
